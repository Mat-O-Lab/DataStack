version: "3"

volumes:
  ckan_storage:
  pg_data:
  solr_data:
  jena_data:

services:

  nginx:
    container_name: ${NGINX_CONTAINER_NAME}
    env_file:
      - .env
    image: nginx:stable-alpine
    #build:
    #  context: ckan-docker/nginx/
    #  dockerfile: Dockerfile
    depends_on:
      ckan:
        condition: service_healthy
    ports:
      - "0.0.0.0:${NGINX_PORT_HOST}:${NGINX_PORT}"
      - "0.0.0.0:${NGINX_SSLPORT_HOST}:${NGINX_SSLPORT}"
    volumes:
      - ./default.conf.template:/etc/nginx/templates/default.conf.template
      - ./ckan-docker/nginx/setup/nginx.conf:/etc/nginx/nginx.conf
      - ./ckan-docker/nginx/setup/ckan-local.crt:/etc/nginx/certs/ckan-local.crt
      - ./ckan-docker/nginx/setup/ckan-local.key:/etc/nginx/certs/ckan-local.key
  ckan:
    container_name: ${CKAN_CONTAINER_NAME}
    build:
      context: ckan-docker/ckan/
      dockerfile: ../../Dockerfile
      #dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
      fuseki:
        condition: service_healthy
    ports:
      - "0.0.0.0:${CKAN_PORT_HOST}:${CKAN_PORT}" 
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./02_envvars.sh:/docker-entrypoint.d/02_envvars.sh
      - ./03_harvest.sh:/docker-entrypoint.d/03_harvest.sh
      - ./ckan.ini:/srv/app/ckan.ini
      - ./dcatde_themes.json:/srv/app/dcatde_themes.json
      - ./ckan_plugins:/srv/app/src_extensions
      - ./supervisor-ckan-worker.conf:/etc/supervisord.d/supervisor-ckan-worker.conf
      - ./logs:/var/log/ckan/
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:${CKAN_PORT}"]
    
  db:
    container_name: ${POSTGRESQL_CONTAINER_NAME}
    build:
      context: ckan-docker/postgresql/
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]

  solr:
    container_name: ${SOLR_CONTAINER_NAME}
    image: ckan/ckan-solr:${SOLR_IMAGE_VERSION}
    volumes:
      - solr_data:/var/solr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/"]

  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]

  fuseki:
    container_name: ${FUSEKI_CONTAINER_NAME}
    build:
     context: jena-docker/
     dockerfile: Dockerfile
    image: fuseki
    expose:
      - 3030
    volumes:
      - ./logs:/fuseki/logs
      - ./jena-docker/config.ttl:/fuseki/config.ttl
      - jena_data:/fuseki/databases
    command: "--ping --debug --stats --conf /fuseki/config.ttl"
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", 'http://localhost:3030/$$/ping']
  csvtocsvw:
    image: "ghcr.io/mat-o-lab/csvtocsvw:latest"
    container_name: ${CSVTOCSVW_CONTAINER_NAME}
    environment:
      APP_MODE: "production"
      PORT: ${CSVTOCSVW_APP_PORT}
      #ADMIN_MAIL: ${ADMIN_MAIL}
    ports:
      - ${CSVTOCSVW_APP_PORT}:${CSVTOCSVW_APP_PORT}
    restart: always
    # networks:
    #   - ckannet
    entrypoint: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${CSVTOCSVW_APP_PORT}", "--workers", "1","--proxy-headers"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CSVTOCSVW_APP_PORT}/info"]
      interval: 60s
      timeout: 10s
      retries: 20
  
  maptomethod:
      image: ghcr.io/mat-o-lab/maptomethod:latest
      environment:
        APP_NAME: "MapToMethod"
        PORT: ${MAPTOMETHOD_APP_PORT}
      container_name: ${MAPTOMETHOD_CONTAINER_NAME}
      ports:
        - ${MAPTOMETHOD_APP_PORT}:${MAPTOMETHOD_APP_PORT}
      restart: always
      entrypoint: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${MAPTOMETHOD_APP_PORT}", "--workers", "1","--proxy-headers"]
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:${MAPTOMETHOD_APP_PORT}/info"]

  yarrrml-parser:
    environment:
      - PORT=${PARSER_PORT}
    image: ghcr.io/mat-o-lab/yarrrml-parser:v.1.0.2
    expose:
      - ${PARSER_PORT}
    restart: always

  rmlmapper:
    # changing port doesnt work - issue on rmlmapper side
    environment:
      - PORT=${MAPPER_PORT}
    container_name: rmlmapper-webapi
    image: ghcr.io/mat-o-lab/rmlmapper-webapi:latest
    expose:
      - ${MAPPER_PORT}
    restart: always

  rdfconverter:
    environment:
      PARSER_PORT: ${PARSER_PORT}
      MAPPER_PORT: ${MAPPER_PORT}
      CONVERTER_PORT: ${RDFCONVERTER_APP_PORT}
      YARRRML_URL: http://yarrrml-parser:${PARSER_PORT}
      MAPPER_URL: http://rmlmapper:${MAPPER_PORT}
      APP_NAME: RDFConverter
      APP_MODE: development
    ports:
      - ${RDFCONVERTER_APP_PORT}:${RDFCONVERTER_APP_PORT}
    container_name: ${RDFCONVERTER_CONTAINER_NAME}
    image: ghcr.io/mat-o-lab/rdfconverter:latest
    restart: always
    entrypoint: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${RDFCONVERTER_APP_PORT}", "--workers", "1","--proxy-headers"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${RDFCONVERTER_APP_PORT}/info"]
      interval: 60s
      timeout: 10s
      retries: 20
  sparklis:
    container_name: ${SPARKLIS_CONTAINER_NAME}
    expose:
      - 8080
    volumes:
      - ./sparklis.html:/app/index.html
    image: sferre/sparklis:latest

    